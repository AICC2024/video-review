{"ast":null,"code":"var _jsxFileName = \"/Users/paulminton/development/video-review/video_review_backend/video_review_frontend/src/components/DocumentViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport mammoth from \"mammoth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocumentViewer = ({\n  url\n}) => {\n  _s();\n  const [content, setContent] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const extension = url.split(\".\").pop().toLowerCase();\n  useEffect(() => {\n    const fetchDocx = async () => {\n      try {\n        const res = await fetch(url);\n        if (!res.ok) throw new Error(\"Failed to load .docx file\");\n        const arrayBuffer = await res.arrayBuffer();\n        const result = await mammoth.convertToHtml({\n          arrayBuffer\n        });\n        setContent(result.value);\n      } catch (err) {\n        setContent(\"⚠️ Failed to render .docx document.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    const fetchPlainText = async () => {\n      try {\n        const res = await fetch(url);\n        const contentType = res.headers.get(\"content-type\") || \"\";\n        if (!contentType.includes(\"text\") && !contentType.includes(\"html\")) {\n          throw new Error(\"Unsupported content type for plain text viewer.\");\n        }\n        const text = await res.text();\n        setContent(text);\n      } catch (err) {\n        setContent(\"⚠️ Failed to load plain text document.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (extension === \"docx\") {\n      fetchDocx();\n    } else if ([\"txt\", \"md\", \"html\"].includes(extension)) {\n      fetchPlainText();\n    } else {\n      setContent(\"⚠️ Unsupported file type.\");\n      setLoading(false);\n    }\n  }, [url, extension]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading document...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\",\n      border: \"1px solid #ccc\",\n      borderRadius: \"6px\",\n      background: \"#f9f9f9\",\n      whiteSpace: \"pre-wrap\",\n      overflowY: \"auto\",\n      maxHeight: \"70vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: content\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(DocumentViewer, \"5lV1igzoCkOZmUpysq4EToXYm+w=\");\n_c = DocumentViewer;\nexport default DocumentViewer;\nvar _c;\n$RefreshReg$(_c, \"DocumentViewer\");","map":{"version":3,"names":["React","useEffect","useState","mammoth","jsxDEV","_jsxDEV","DocumentViewer","url","_s","content","setContent","loading","setLoading","extension","split","pop","toLowerCase","fetchDocx","res","fetch","ok","Error","arrayBuffer","result","convertToHtml","value","err","fetchPlainText","contentType","headers","get","includes","text","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","border","borderRadius","background","whiteSpace","overflowY","maxHeight","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/Users/paulminton/development/video-review/video_review_backend/video_review_frontend/src/components/DocumentViewer.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport mammoth from \"mammoth\";\n\nconst DocumentViewer = ({ url }) => {\n  const [content, setContent] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const extension = url.split(\".\").pop().toLowerCase();\n\n  useEffect(() => {\n    const fetchDocx = async () => {\n      try {\n        const res = await fetch(url);\n        if (!res.ok) throw new Error(\"Failed to load .docx file\");\n        const arrayBuffer = await res.arrayBuffer();\n        const result = await mammoth.convertToHtml({ arrayBuffer });\n        setContent(result.value);\n      } catch (err) {\n        setContent(\"⚠️ Failed to render .docx document.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const fetchPlainText = async () => {\n      try {\n        const res = await fetch(url);\n        const contentType = res.headers.get(\"content-type\") || \"\";\n        if (!contentType.includes(\"text\") && !contentType.includes(\"html\")) {\n          throw new Error(\"Unsupported content type for plain text viewer.\");\n        }\n        const text = await res.text();\n        setContent(text);\n      } catch (err) {\n        setContent(\"⚠️ Failed to load plain text document.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (extension === \"docx\") {\n      fetchDocx();\n    } else if ([\"txt\", \"md\", \"html\"].includes(extension)) {\n      fetchPlainText();\n    } else {\n      setContent(\"⚠️ Unsupported file type.\");\n      setLoading(false);\n    }\n  }, [url, extension]);\n\n  if (loading) return <div>Loading document...</div>;\n\n  return (\n    <div style={{\n      padding: \"1rem\",\n      border: \"1px solid #ccc\",\n      borderRadius: \"6px\",\n      background: \"#f9f9f9\",\n      whiteSpace: \"pre-wrap\",\n      overflowY: \"auto\",\n      maxHeight: \"70vh\"\n    }}>\n      <div dangerouslySetInnerHTML={{ __html: content }} />\n    </div>\n  );\n};\n\nexport default DocumentViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}